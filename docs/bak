import React, { useEffect, useState } from "react";
import { Text, TouchableOpacity, View } from "react-native";
import { Audio } from "expo-av";

const keys = [
  {
    id: 0,
    color: "white",
    name: "c",
    sound: require("../sounds/C3.mp3"),
  },
  { id: 1, color: "black", name: "" },
  {
    id: 2,
    color: "white",
    name: "d",
    sound: require("../sounds/D3.mp3"),
  },
  { id: 3, color: "black", name: "" },
  {
    id: 4,
    color: "white",
    name: "e",
    sound: require("../sounds/E3.mp3"),
  },
  {
    id: 5,
    color: "white",
    name: "f",
    sound: require("../sounds/F3.mp3"),
  },
  { id: 6, color: "black", name: "" },
  {
    id: 7,
    color: "white",
    name: "g",
    sound: require("../sounds/G3.mp3"),
  },
  { id: 8, color: "black", name: "" },
  {
    id: 9,
    color: "white",
    name: "a",
    sound: require("../sounds/A3.mp3"),
  },
  { id: 10, color: "black", name: "" },
  {
    id: 11,
    color: "white",
    name: "b",
    sound: require("../sounds/B3.mp3"),
  },
  {
    id: 12,
    color: "white",
    name: "c",
    sound: require("../sounds/C4.mp3"),
  },
];

const Piano = () => {
  const [notes, setNotes] = useState([]);

  useEffect(() => {
    const tempNotes = keys
      .filter((key) => typeof key.sound !== "undefined")
      .map(async (key, idx) => {
        const sound = await Audio.Sound.createAsync(key.sound, {
          shouldPlay: true,
        });
        // .then((res) => {
        //   res.sound.setOnPlaybackStatusUpdate((status) => {
        //     if (!status.didJustFinish) return;

        //     // TODO: create global notification dispathcer to handle errores and show them in the UI
        //     res.sound.unloadAsync().catch((error) => {
        //       console.error(error);
        //     });
        //   });
        // })
        // .catch((error) => {});
        return sound;
      });

    console.log("tempNotes", tempNotes);
    setNotes(tempNotes);
  }, []);

  // const playSound = (name, sound) => {
  //   if (!sound) return;
  //   console.log("Playing " + name);
  //   Audio.Sound.createAsync(sound, { shouldPlay: true })
  //     .then((res) => {
  //       res.sound.setOnPlaybackStatusUpdate((status) => {
  //         if (!status.didJustFinish) return;

  //         // TODO: create global notification dispathcer to handle errores and show them in the UI
  //         res.sound.unloadAsync().catch((error) => {
  //           console.error(error);
  //         });
  //       });
  //     })
  //     .catch((error) => {});
  // };

  const playSound = (name, sound) => {
    if (!sound) return;
    console.log("Playing " + name);
  };

  return (
    <View>
      <View className="flex h-full flex-row justify-evenly">
        {keys.map((key, idx) => (
          <TouchableOpacity
            onPressIn={() => playSound(key.name, key.sound)}
            className="flex h-full flex-grow"
            key={key.id}
          >
            <View
              className="h-full items-center justify-end border pb-4"
              style={{ backgroundColor: key.color }}
            >
              <Text className="text-2xl">{key.name}</Text>
            </View>
          </TouchableOpacity>
        ))}
      </View>
    </View>
  );
};

const Index = () => {
  return (
    <View>
      <Piano />
    </View>
  );
};

export default Index;


======================================================================
======================================================================
======================================================================

import React, { useEffect, useState } from "react";
import { Text, TouchableOpacity, View } from "react-native";
import { Audio } from "expo-av";

const keys = [
  {
    id: 0,
    color: "white",
    name: "c",
    sound: require("../sounds/C3.mp3"),
  },
  { color: "black", name: "" },
  {
    id: 1,
    color: "white",
    name: "d",
    sound: require("../sounds/D3.mp3"),
  },
  { color: "black", name: "" },
  {
    id: 2,
    color: "white",
    name: "e",
    sound: require("../sounds/E3.mp3"),
  },
  {
    id: 3,
    color: "white",
    name: "f",
    sound: require("../sounds/F3.mp3"),
  },
  { color: "black", name: "" },
  {
    id: 4,
    color: "white",
    name: "g",
    sound: require("../sounds/G3.mp3"),
  },
  { color: "black", name: "" },
  {
    id: 5,
    color: "white",
    name: "a",
    sound: require("../sounds/A3.mp3"),
  },
  { color: "black", name: "" },
  {
    id: 6,
    color: "white",
    name: "b",
    sound: require("../sounds/B3.mp3"),
  },
  {
    id: 7,
    color: "white",
    name: "c",
    sound: require("../sounds/C4.mp3"),
  },
];

const Piano = () => {
  const [notes, setNotes] = useState([]);

  useEffect(() => {
    const tempNotes = keys
      .filter((key) => typeof key.sound !== "undefined")
      .map(async (key, idx) => {
        // console.log("key.sound", key.sound);
        const sound = await Audio.Sound.createAsync(key.sound, {
          shouldPlay: false,
        })
        .then((res) => {
                res.sound.setOnPlaybackStatusUpdate((status) => {
                  if (!status.didJustFinish) return;
        
                  // TODO: create global notification dispathcer to handle errores and show them in the UI
                  res.sound.unloadAsync().catch((error) => {
                    console.error(error);
                  });
                });
              })
        .catch((error) => {
          console.log("error:", error);
        });
        return sound;
      });

    // console.log("tempNotes", tempNotes);
    setNotes(tempNotes);
  }, []);

  // const playSound = (name, sound) => {
  const playSound = (key) => {
    // console.log("test", notes[key.id]);
    if (key.id && notes[key.id]) {
      notes[key.id].playAsync();
      console.log(notes[key.id]);
    }
    // if (key.id && notes[key.id]) notes[key.id].playAsync();
    return;
    if (!sound) return;
    console.log("Playing " + name);
    Audio.Sound.createAsync(sound, { shouldPlay: true })
      .then((res) => {
        res.sound.setOnPlaybackStatusUpdate((status) => {
          if (!status.didJustFinish) return;

          // TODO: create global notification dispathcer to handle errores and show them in the UI
          res.sound.unloadAsync().catch((error) => {
            console.error(error);
          });
        });
      })
      .catch((error) => {});
  };

  return (
    <View>
      <View className="flex h-full flex-row justify-evenly">
        {keys.map((key, idx) => (
          <TouchableOpacity
            // onPressIn={() => playSound(key.name, key.sound)}
            onPressIn={() => playSound(key)}
            className="flex h-full flex-grow"
            key={key.id}
          >
            <View
              className="h-full items-center justify-end border pb-4"
              style={{ backgroundColor: key.color }}
            >
              <Text className="text-2xl">{key.name}</Text>
            </View>
          </TouchableOpacity>
        ))}
      </View>
    </View>
  );
};

const Index = () => {
  return (
    <View>
      <Piano />
    </View>
  );
};

export default Index;
